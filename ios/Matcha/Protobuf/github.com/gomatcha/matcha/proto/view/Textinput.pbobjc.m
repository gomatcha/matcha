// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/gomatcha/matcha/proto/view/textinput.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "github.com/gomatcha/matcha/proto/view/Textinput.pbobjc.h"
#import "github.com/gomatcha/matcha/proto/text/Text.pbobjc.h"
#import "github.com/gomatcha/matcha/proto/keyboard/Keyboard.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MatchaViewPBTextinputRoot

@implementation MatchaViewPBTextinputRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MatchaViewPBTextinputRoot_FileDescriptor

static GPBFileDescriptor *MatchaViewPBTextinputRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"matcha.view"
                                                 objcPrefix:@"MatchaViewPB"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MatchaViewPBTextInput

@implementation MatchaViewPBTextInput

@dynamic hasStyledText, styledText;
@dynamic hasPlaceholderText, placeholderText;
@dynamic hasFont, font;
@dynamic focused;
@dynamic keyboardType;
@dynamic keyboardAppearance;
@dynamic keyboardReturnType;
@dynamic maxLines;
@dynamic secureTextEntry;

typedef struct MatchaViewPBTextInput__storage_ {
  uint32_t _has_storage_[1];
  MatchaKeyboardPBType keyboardType;
  MatchaKeyboardPBAppearance keyboardAppearance;
  MatchaKeyboardPBReturnType keyboardReturnType;
  MatchaPBStyledText *styledText;
  MatchaPBStyledText *placeholderText;
  MatchaPBFont *font;
  int64_t maxLines;
} MatchaViewPBTextInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "styledText",
        .dataTypeSpecific.className = GPBStringifySymbol(MatchaPBStyledText),
        .number = MatchaViewPBTextInput_FieldNumber_StyledText,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaViewPBTextInput__storage_, styledText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "placeholderText",
        .dataTypeSpecific.className = GPBStringifySymbol(MatchaPBStyledText),
        .number = MatchaViewPBTextInput_FieldNumber_PlaceholderText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MatchaViewPBTextInput__storage_, placeholderText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "focused",
        .dataTypeSpecific.className = NULL,
        .number = MatchaViewPBTextInput_FieldNumber_Focused,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "keyboardType",
        .dataTypeSpecific.enumDescFunc = MatchaKeyboardPBType_EnumDescriptor,
        .number = MatchaViewPBTextInput_FieldNumber_KeyboardType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MatchaViewPBTextInput__storage_, keyboardType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "keyboardAppearance",
        .dataTypeSpecific.enumDescFunc = MatchaKeyboardPBAppearance_EnumDescriptor,
        .number = MatchaViewPBTextInput_FieldNumber_KeyboardAppearance,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MatchaViewPBTextInput__storage_, keyboardAppearance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "keyboardReturnType",
        .dataTypeSpecific.enumDescFunc = MatchaKeyboardPBReturnType_EnumDescriptor,
        .number = MatchaViewPBTextInput_FieldNumber_KeyboardReturnType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MatchaViewPBTextInput__storage_, keyboardReturnType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "maxLines",
        .dataTypeSpecific.className = NULL,
        .number = MatchaViewPBTextInput_FieldNumber_MaxLines,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MatchaViewPBTextInput__storage_, maxLines),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "secureTextEntry",
        .dataTypeSpecific.className = NULL,
        .number = MatchaViewPBTextInput_FieldNumber_SecureTextEntry,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "font",
        .dataTypeSpecific.className = GPBStringifySymbol(MatchaPBFont),
        .number = MatchaViewPBTextInput_FieldNumber_Font,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MatchaViewPBTextInput__storage_, font),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaViewPBTextInput class]
                                     rootClass:[MatchaViewPBTextinputRoot class]
                                          file:MatchaViewPBTextinputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaViewPBTextInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\n\000\002\017\000\005\014\000\006\022\000\007\022\000\010\010\000\t\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MatchaViewPBTextInput_KeyboardType_RawValue(MatchaViewPBTextInput *message) {
  GPBDescriptor *descriptor = [MatchaViewPBTextInput descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaViewPBTextInput_FieldNumber_KeyboardType];
  return GPBGetMessageInt32Field(message, field);
}

void SetMatchaViewPBTextInput_KeyboardType_RawValue(MatchaViewPBTextInput *message, int32_t value) {
  GPBDescriptor *descriptor = [MatchaViewPBTextInput descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaViewPBTextInput_FieldNumber_KeyboardType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t MatchaViewPBTextInput_KeyboardAppearance_RawValue(MatchaViewPBTextInput *message) {
  GPBDescriptor *descriptor = [MatchaViewPBTextInput descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaViewPBTextInput_FieldNumber_KeyboardAppearance];
  return GPBGetMessageInt32Field(message, field);
}

void SetMatchaViewPBTextInput_KeyboardAppearance_RawValue(MatchaViewPBTextInput *message, int32_t value) {
  GPBDescriptor *descriptor = [MatchaViewPBTextInput descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaViewPBTextInput_FieldNumber_KeyboardAppearance];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t MatchaViewPBTextInput_KeyboardReturnType_RawValue(MatchaViewPBTextInput *message) {
  GPBDescriptor *descriptor = [MatchaViewPBTextInput descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaViewPBTextInput_FieldNumber_KeyboardReturnType];
  return GPBGetMessageInt32Field(message, field);
}

void SetMatchaViewPBTextInput_KeyboardReturnType_RawValue(MatchaViewPBTextInput *message, int32_t value) {
  GPBDescriptor *descriptor = [MatchaViewPBTextInput descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaViewPBTextInput_FieldNumber_KeyboardReturnType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - MatchaViewPBTextInputEvent

@implementation MatchaViewPBTextInputEvent

@dynamic hasStyledText, styledText;

typedef struct MatchaViewPBTextInputEvent__storage_ {
  uint32_t _has_storage_[1];
  MatchaPBStyledText *styledText;
} MatchaViewPBTextInputEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "styledText",
        .dataTypeSpecific.className = GPBStringifySymbol(MatchaPBStyledText),
        .number = MatchaViewPBTextInputEvent_FieldNumber_StyledText,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaViewPBTextInputEvent__storage_, styledText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaViewPBTextInputEvent class]
                                     rootClass:[MatchaViewPBTextinputRoot class]
                                          file:MatchaViewPBTextinputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaViewPBTextInputEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MatchaViewPBTextInputFocusEvent

@implementation MatchaViewPBTextInputFocusEvent

@dynamic focused;

typedef struct MatchaViewPBTextInputFocusEvent__storage_ {
  uint32_t _has_storage_[1];
} MatchaViewPBTextInputFocusEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "focused",
        .dataTypeSpecific.className = NULL,
        .number = MatchaViewPBTextInputFocusEvent_FieldNumber_Focused,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaViewPBTextInputFocusEvent class]
                                     rootClass:[MatchaViewPBTextinputRoot class]
                                          file:MatchaViewPBTextinputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaViewPBTextInputFocusEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MatchaViewPBTextInputSubmitEvent

@implementation MatchaViewPBTextInputSubmitEvent


typedef struct MatchaViewPBTextInputSubmitEvent__storage_ {
  uint32_t _has_storage_[1];
} MatchaViewPBTextInputSubmitEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaViewPBTextInputSubmitEvent class]
                                     rootClass:[MatchaViewPBTextinputRoot class]
                                          file:MatchaViewPBTextinputRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MatchaViewPBTextInputSubmitEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
