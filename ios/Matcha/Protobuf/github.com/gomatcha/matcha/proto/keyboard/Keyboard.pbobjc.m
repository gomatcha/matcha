// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/gomatcha/matcha/proto/keyboard/keyboard.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "github.com/gomatcha/matcha/proto/keyboard/Keyboard.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MatchaKeyboardPBKeyboardRoot

@implementation MatchaKeyboardPBKeyboardRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum MatchaKeyboardPBType

GPBEnumDescriptor *MatchaKeyboardPBType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TextType\000NumberType\000EmailType\000URLType\000Ph"
        "oneType\000DateTimeType\000";
    static const int32_t values[] = {
        MatchaKeyboardPBType_TextType,
        MatchaKeyboardPBType_NumberType,
        MatchaKeyboardPBType_EmailType,
        MatchaKeyboardPBType_URLType,
        MatchaKeyboardPBType_PhoneType,
        MatchaKeyboardPBType_DateTimeType,
    };
    static const char *extraTextFormatInfo = "\001\003\003\344\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MatchaKeyboardPBType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MatchaKeyboardPBType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MatchaKeyboardPBType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MatchaKeyboardPBType_TextType:
    case MatchaKeyboardPBType_NumberType:
    case MatchaKeyboardPBType_EmailType:
    case MatchaKeyboardPBType_URLType:
    case MatchaKeyboardPBType_PhoneType:
    case MatchaKeyboardPBType_DateTimeType:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum MatchaKeyboardPBAppearance

GPBEnumDescriptor *MatchaKeyboardPBAppearance_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DefaultAppearance\000LightAppearance\000DarkAp"
        "pearance\000";
    static const int32_t values[] = {
        MatchaKeyboardPBAppearance_DefaultAppearance,
        MatchaKeyboardPBAppearance_LightAppearance,
        MatchaKeyboardPBAppearance_DarkAppearance,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MatchaKeyboardPBAppearance)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MatchaKeyboardPBAppearance_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MatchaKeyboardPBAppearance_IsValidValue(int32_t value__) {
  switch (value__) {
    case MatchaKeyboardPBAppearance_DefaultAppearance:
    case MatchaKeyboardPBAppearance_LightAppearance:
    case MatchaKeyboardPBAppearance_DarkAppearance:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum MatchaKeyboardPBReturnType

GPBEnumDescriptor *MatchaKeyboardPBReturnType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DefaultReturnType\000GoReturnType\000GoogleRet"
        "urnType\000JoinReturnType\000NextReturnType\000Ro"
        "uteReturnType\000SearchReturnType\000SendRetur"
        "nType\000YahooReturnType\000DoneReturnType\000Eme"
        "rgencyCallReturnType\000ContinueReturnType\000";
    static const int32_t values[] = {
        MatchaKeyboardPBReturnType_DefaultReturnType,
        MatchaKeyboardPBReturnType_GoReturnType,
        MatchaKeyboardPBReturnType_GoogleReturnType,
        MatchaKeyboardPBReturnType_JoinReturnType,
        MatchaKeyboardPBReturnType_NextReturnType,
        MatchaKeyboardPBReturnType_RouteReturnType,
        MatchaKeyboardPBReturnType_SearchReturnType,
        MatchaKeyboardPBReturnType_SendReturnType,
        MatchaKeyboardPBReturnType_YahooReturnType,
        MatchaKeyboardPBReturnType_DoneReturnType,
        MatchaKeyboardPBReturnType_EmergencyCallReturnType,
        MatchaKeyboardPBReturnType_ContinueReturnType,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MatchaKeyboardPBReturnType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MatchaKeyboardPBReturnType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MatchaKeyboardPBReturnType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MatchaKeyboardPBReturnType_DefaultReturnType:
    case MatchaKeyboardPBReturnType_GoReturnType:
    case MatchaKeyboardPBReturnType_GoogleReturnType:
    case MatchaKeyboardPBReturnType_JoinReturnType:
    case MatchaKeyboardPBReturnType_NextReturnType:
    case MatchaKeyboardPBReturnType_RouteReturnType:
    case MatchaKeyboardPBReturnType_SearchReturnType:
    case MatchaKeyboardPBReturnType_SendReturnType:
    case MatchaKeyboardPBReturnType_YahooReturnType:
    case MatchaKeyboardPBReturnType_DoneReturnType:
    case MatchaKeyboardPBReturnType_EmergencyCallReturnType:
    case MatchaKeyboardPBReturnType_ContinueReturnType:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
